<%- include("../include/head.ejs") %>
<%- include("../include/navebar.ejs") %>
<%- include("../include/notification.ejs") %>

<style>
  .section-container {
    display: none;
  }
  .section-container.active {
    display: block;
  }
  .timer {
    font-size: 1.5rem;
    font-weight: bold;
    text-align: center;
    margin-bottom: 20px;
  }
  .audio-control {
    margin-bottom: 10px;
  }
</style>

<div class="exam">
  <div class="container">
    <h1 class="text-center">الاختبار</h1>
    <div id="timer" class="timer">00:00</div>

    <% if (examData.questions && examData.questions.length > 0) { %>
      <% const sections = [...new Set(examData.questions.map(q => q.section))]; %>
      <% sections.forEach((sectionId, sectionIndex) => { %>
        <div class="section-container" id="section-<%= sectionIndex %>" data-duration="<%= examData.questions.find(q => q.section === sectionId).duration || 5 %>">
          <h2 class="text-center">القسم: <%= examData.questions.find(q => q.section === sectionId).sectionName || `قسم ${sectionIndex + 1}` %></h2>
          <% const sectionQuestions = examData.questions.filter(q => q.section === sectionId); %>
          <% if (sectionQuestions && sectionQuestions.length > 0) { %>
            <% sectionQuestions.forEach((question, questionIndex) => { %>
              <div class="question">
                <h3><%= question.questionText %></h3>
                <% if (question.type === 'multipleChoice') { %>
                  <% question.choices.forEach((choice) => { %>
                    <div>
                      <label>
                        <input type="radio" name="question-<%= sectionIndex %>-<%= questionIndex %>" value="<%= choice %>"> <%= choice %>
                      </label>
                    </div>
                  <% }) %>
                <% } else if (question.type === 'trueFalse') { %>
                  <div>
                    <label><input type="radio" name="question-<%= sectionIndex %>-<%= questionIndex %>" value="true"> صح</label>
                    <label><input type="radio" name="question-<%= sectionIndex %>-<%= questionIndex %>" value="false"> خطأ</label>
                  </div>
                <% } else if (question.type === 'fillInTheBlank') { %>
                  <input type="text" name="question-<%= sectionIndex %>-<%= questionIndex %>" class="form-control">
                <% } else if (question.type === 'audio') { %>
                  <div>
                    <audio src="/uploads/<%= question.file %>" controls class="audio-control" data-played="false"></audio>
                    <button class="record-audio" data-question="<%= questionIndex %>">تسجيل صوت</button>
                  </div>
                <% } else if (question.type === 'file') { %>
                  <div>
                    <a href="/uploads/<%= question.file %>" target="_blank">عرض الملف</a>
                    <button class="record-audio" data-question="<%= questionIndex %>">تسجيل صوت</button>
                  </div>
                <% } %>
              </div>
            <% }) %>
          <% } else { %>
            <p>لا توجد أسئلة في هذا القسم.</p>
          <% } %>
        </div>
      <% }) %>
    <% } else { %>
      <p>لا توجد أسئلة متاحة.</p>
    <% } %>

    <button id="submit-section" class="btn btn-primary">الانتقال إلى القسم التالي</button>
  </div>
</div>

<%- include("../include/footer.ejs") %>
<%- include("../include/footerScript.ejs") %>

<script>
  const sections = document.querySelectorAll(".section-container");
  const timerDisplay = document.getElementById("timer");
  const submitButton = document.getElementById("submit-section");

  let currentSectionIndex = 0;
  let timerInterval;

  const startTimer = (duration, callback) => {
    let remainingTime = duration * 60;

    const updateTimer = () => {
      const minutes = Math.floor(remainingTime / 60);
      const seconds = remainingTime % 60;
      timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

      if (remainingTime <= 0) {
        clearInterval(timerInterval);
        callback();
      } else {
        remainingTime--;
      }
    };

    updateTimer();
    timerInterval = setInterval(updateTimer, 1000);
  };

  const showSection = (index) => {
    sections.forEach((section, idx) => {
      section.classList.toggle("active", idx === index);
    });

    const duration = parseInt(sections[index].dataset.duration, 10);
    startTimer(duration, () => {
      submitSection();
    });
  };

  const submitSection = () => {
    clearInterval(timerInterval);

    const formData = new FormData();
    const currentSection = sections[currentSectionIndex];

    const inputs = currentSection.querySelectorAll("input, textarea, audio");
    inputs.forEach((input) => {
      if (input.type === "radio" && input.checked) {
        formData.append(input.name, input.value);
      } else if (input.type !== "radio" && input.tagName !== "AUDIO") {
        formData.append(input.name, input.value);
      } else if (input.tagName === "AUDIO" && input.getAttribute("data-played") === "true") {
        formData.append(input.name, input.src);
      }
    });

    axios.post(`/submitSection/<%= examData._id %>?sectionIndex=${currentSectionIndex}`, formData)
      .then(() => {
        if (currentSectionIndex < sections.length - 1) {
          currentSectionIndex++;
          showSection(currentSectionIndex);
        } else {
          alert("تم الانتهاء من الاختبار");
          window.location.href = "/allTesting";
        }
      })
      .catch((error) => {
        console.error(error);
        alert("حدث خطأ أثناء إرسال الإجابات، يرجى المحاولة مرة أخرى.");
      });
  };

  document.querySelectorAll(".audio-control").forEach(audio => {
    audio.addEventListener("play", (event) => {
      const played = event.target.getAttribute("data-played");
      if (played === "true") {
        alert("لا يمكن تشغيل الملف الصوتي مرة أخرى.");
        event.target.pause();
      } else {
        event.target.setAttribute("data-played", "true");
      }
    });
  });

  document.querySelectorAll(".record-audio").forEach(button => {
    button.addEventListener("click", async (event) => {
      const questionIndex = event.target.dataset.question;
      const parent = event.target.closest(".question");
      const audioElement = parent.querySelector("audio");
      let mediaRecorder;
      let chunks = [];

      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);

      mediaRecorder.ondataavailable = (e) => {
        chunks.push(e.data);
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: "audio/ogg; codecs=opus" });
        const url = URL.createObjectURL(blob);
        audioElement.src = url;
        audioElement.classList.remove("d-none");
        chunks = [];
        formData.append(`audio-${questionIndex}`, blob);
      };

      mediaRecorder.start();

      setTimeout(() => {
        mediaRecorder.stop();
      }, 60000); // توقف التسجيل تلقائيًا بعد 60 ثانية
    });
  });

  submitButton.addEventListener("click", submitSection);

  showSection(currentSectionIndex);
</script>
